
#include <iostream>
#include <cmath>
#include <limits>

using namespace std;

class hashTable {
private:
    double *items;
    int size;
    int max;
public:
    hashTable(){
        size = 0;
        max = 1<<(9);
        items = new double[max];
        for(int i = 0; i < max; i++){
            items[i] = numeric_limits<double>::infinity();
        }
    }
    hashTable(int x){
        size = 0;
        max = 2<<(x-1);
        items = new double[max];
        for(int i = 0; i < max; i++){
            items[i] = numeric_limits<double>::infinity();
        }
    }
    int hash(int x){
        int z = 60147, w = 16, d = 9;
        return ((z*x)%(1<<w))>>(w-d);
    }
    void insert(int x){
        if(size < max){
            int hashIndex = hash(x), coll = 0;
            while(items[hashIndex] != numeric_limits<double>::infinity()){
                hashIndex = (hashIndex + 1)%(max-1);
                coll++;
            }
            items[hashIndex] = x;
            size++;
            cout<<coll<<" ";
            //display();
        }
        else {
            cout<<"HASH FULL."<<endl;
        }
    }
    void search(int x){
        if(size > 0){
            int coll = 0;
            int hashIndex = hash(x);
            while(items[hashIndex] != numeric_limits<double>::infinity() && items[hashIndex] != x){
                hashIndex = (hashIndex + 1)%(max-1);
                coll++;
            }
            cout<<coll<<endl;
            //display();
        }
        else {
            cout<<"HASH EMPTY."<<endl;
        }
    }
    void display(){
        for(int i = 0; i<max; i++){
            cout<<i<<": "<<items[i]<<" ";
        }
        cout<<endl;
    }
};

int main(){
    int tstcs, num, item, srch;
    cin>>tstcs;

    while(tstcs){
        hashTable *a = new hashTable();
        cin>>num;
        while(num){
            cin>>item;
            a->insert(item);
            num--;
        }
        cout<<endl;
        cin>>srch;
        a->search(srch);
        tstcs--;
        //cout<<endl;
    }
    return 0;
}
